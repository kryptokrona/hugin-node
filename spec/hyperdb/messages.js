// This file is autogenerated by the hyperschema compiler
// Schema Version: 3
/* eslint-disable camelcase */
/* eslint-disable quotes */

const VERSION = 3
const { c } = require('hyperschema/runtime')

// eslint-disable-next-line no-unused-vars
let version = VERSION

// @messages/messages
const encoding0 = {
  preencode (state, m) {
    c.string.preencode(state, m.cipher)
    c.uint.preencode(state, m.timestamp)
    c.string.preencode(state, m.pub)
    c.string.preencode(state, m.hash)
  },
  encode (state, m) {
    c.string.encode(state, m.cipher)
    c.uint.encode(state, m.timestamp)
    c.string.encode(state, m.pub)
    c.string.encode(state, m.hash)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.uint.decode(state)
    const r2 = c.string.decode(state)
    const r3 = c.string.decode(state)

    return {
      cipher: r0,
      timestamp: r1,
      pub: r2,
      hash: r3
    }
  }
}

// @lol/messages
const encoding1 = {
  preencode (state, m) {
    c.string.preencode(state, m.cipher)
    c.uint.preencode(state, m.timestamp)
    c.string.preencode(state, m.pub)
    c.string.preencode(state, m.hash)
    c.string.preencode(state, m.signature)
  },
  encode (state, m) {
    c.string.encode(state, m.cipher)
    c.uint.encode(state, m.timestamp)
    c.string.encode(state, m.pub)
    c.string.encode(state, m.hash)
    c.string.encode(state, m.signature)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r1 = c.uint.decode(state)
    const r2 = c.string.decode(state)
    const r3 = c.string.decode(state)
    const r4 = c.string.decode(state)

    return {
      cipher: r0,
      timestamp: r1,
      pub: r2,
      hash: r3,
      signature: r4
    }
  }
}

// @schema/messages
const encoding2 = encoding1

// @messages/messages/hyperdb#0
const encoding3 = {
  preencode (state, m) {
    c.string.preencode(state, m.cipher)
    c.string.preencode(state, m.pub)
    c.string.preencode(state, m.hash)
  },
  encode (state, m) {
    c.string.encode(state, m.cipher)
    c.string.encode(state, m.pub)
    c.string.encode(state, m.hash)
  },
  decode (state) {
    const r0 = c.string.decode(state)
    const r2 = c.string.decode(state)
    const r3 = c.string.decode(state)

    return {
      cipher: r0,
      timestamp: 0,
      pub: r2,
      hash: r3
    }
  }
}

function setVersion (v) {
  version = v
}

function encode (name, value, v = VERSION) {
  version = v
  return c.encode(getEncoding(name), value)
}

function decode (name, buffer, v = VERSION) {
  version = v
  return c.decode(getEncoding(name), buffer)
}

function getEnum (name) {
  switch (name) {
    default: throw new Error('Enum not found ' + name)
  }
}

function getEncoding (name) {
  switch (name) {
    case '@messages/messages': return encoding0
    case '@lol/messages': return encoding1
    case '@schema/messages': return encoding2
    case '@messages/messages/hyperdb#0': return encoding3
    default: throw new Error('Encoder not found ' + name)
  }
}

function getStruct (name, v = VERSION) {
  const enc = getEncoding(name)
  return {
    preencode (state, m) {
      version = v
      enc.preencode(state, m)
    },
    encode (state, m) {
      version = v
      enc.encode(state, m)
    },
    decode (state) {
      version = v
      return enc.decode(state)
    }
  }
}

const resolveStruct = getStruct // compat

module.exports = { resolveStruct, getStruct, getEnum, getEncoding, encode, decode, setVersion, version }
